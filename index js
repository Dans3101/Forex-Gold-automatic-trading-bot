// index.js
import "dotenv/config";
import { initWhatsApp, sendToGroupByName } from "./whatsapp.js";
import { fetchCandlesBinance, computeIndicators, decideSignal } from "./strategy.js";

const GROUP_NAME = process.env.GROUP_NAME || "PocketOption Signals";
const SYMBOLS = (process.env.SYMBOLS || "BTCUSDT,ETHUSDT").split(",").map(s => s.trim());
const LOOP_SECONDS = parseInt(process.env.LOOP_SECONDS || "120", 10);
const PRE_SIGNAL_DELAY_MS = parseInt(process.env.PRE_SIGNAL_DELAY_MS || "30000", 10);

async function pushSignalToGroup(symbol) {
  try {
    const candles = await fetchCandlesBinance(symbol, 250);
    if (!candles || candles.length === 0) {
      console.log("No candle data for", symbol);
      return;
    }
    const closes = candles.map(c => c.close);
    const lastClose = closes[closes.length - 1];

    const ind = computeIndicators(closes);
    if (!ind) {
      console.log("Insufficient data for indicators");
      return;
    }

    // 1) Announce asset
    await sendToGroupByName(GROUP_NAME, `📊 New Asset Incoming: ${symbol}\nPrice: ${lastClose}`);

    // 2) Wait (30s)
    await new Promise(res => setTimeout(res, PRE_SIGNAL_DELAY_MS));

    // 3) Decide & send
    const { side, reasons } = decideSignal(ind);
    if (!side) {
      await sendToGroupByName(GROUP_NAME, `ℹ️ No strong signal for ${symbol} now.`);
    } else {
      const msg = [
        "🔔 Trading Signal",
        `Pair: ${symbol}`,
        `Decision: ${side}`,
        `Price: ${lastClose}`,
        `RSI: ${ind.rsi?.toFixed(2)}`,
        `EMA10: ${ind.ema10?.toFixed(4)} | EMA25: ${ind.ema25?.toFixed(4)}`,
        `MACD: ${ind.macd?.toFixed(6)} | Signal: ${ind.macdSignal?.toFixed(6)}`,
        `Reasons: ${reasons.join(", ")}`,
      ].join("\n");
      await sendToGroupByName(GROUP_NAME, msg);
    }
  } catch (err) {
    console.error("pushSignalToGroup error:", err.message || err);
  }
}

async function runOnce() {
  const symbol = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
  await pushSignalToGroup(symbol);
}

async function main() {
  await initWhatsApp();
  console.log("Bot connected — starting loop");
  // First run immediately
  runOnce();
  // Then run every LOOP_SECONDS
  setInterval(runOnce, LOOP_SECONDS * 1000);
}

main().catch(err => console.error("Main error:", err));