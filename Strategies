import math

# --- Tiny indicator helpers (no external TA lib needed) ---

def ema(series, period):
    k = 2 / (period + 1)
    ema_vals = []
    ema_prev = None
    for i, v in enumerate(series):
        if v is None or math.isnan(v):
            ema_vals.append(None)
            continue
        if ema_prev is None:
            ema_prev = v  # seed with first value
        else:
            ema_prev = v * k + ema_prev * (1 - k)
        ema_vals.append(ema_prev)
    return ema_vals

def rsi(series, period=14):
    gains, losses = [], []
    rsi_vals = [None] * len(series)
    for i in range(1, len(series)):
        change = series[i] - series[i - 1]
        gains.append(max(change, 0.0))
        losses.append(abs(min(change, 0.0)))
        if i >= period:
            avg_gain = sum(gains[i - period:i]) / period
            avg_loss = sum(losses[i - period:i]) / period
            if avg_loss == 0:
                rs = float("inf")
            else:
                rs = avg_gain / avg_loss
            rsi_vals[i] = 100 - (100 / (1 + rs))
    return rsi_vals

def macd(series, fast=12, slow=26, signal=9):
    ema_fast = ema(series, fast)
    ema_slow = ema(series, slow)
    macd_line = []
    for f, s in zip(ema_fast, ema_slow):
        macd_line.append(None if (f is None or s is None) else (f - s))
    macd_signal = ema([x if x is not None else float("nan") for x in macd_line], signal)
    return macd_line, macd_signal

# --- Strategy logic ---

def get_signal_from_candles(candles, asset="BTCUSDT", interval="1m"):
    """
    candles: list of dicts with keys: open, high, low, close (floats), open_time (int ms)
    Returns payload dict or None
    """
    closes = [c["close"] for c in candles]
    if len(closes) < 50:
        return None

    # Indicators
    rsi_vals = rsi(closes, period=14)
    ema_fast_vals = ema(closes, period=10)
    ema_slow_vals = ema(closes, period=25)
    macd_line, macd_sig = macd(closes, fast=12, slow=26, signal=9)

    i = len(closes) - 1
    latest_close = closes[i]
    latest_rsi = rsi_vals[i]
    latest_ema_fast = ema_fast_vals[i]
    latest_ema_slow = ema_slow_vals[i]
    latest_macd = macd_line[i]
    latest_macd_sig = macd_sig[i]

    # Confirm required values are present
    if any(v is None or (isinstance(v, float) and math.isnan(v)) for v in
           [latest_rsi, latest_ema_fast, latest_ema_slow, latest_macd, latest_macd_sig]):
        return None

    reasons = []
    signal = None

    # RSI conditions
    if latest_rsi < 30:
        reasons.append("RSI oversold (<30)")
    elif latest_rsi > 70:
        reasons.append("RSI overbought (>70)")

    # EMA crossover (check current and previous to detect cross)
    prev_ema_fast = ema_fast_vals[i - 1]
    prev_ema_slow = ema_slow_vals[i - 1]
    if prev_ema_fast is not None and prev_ema_slow is not None:
        if prev_ema_fast < prev_ema_slow and latest_ema_fast > latest_ema_slow:
            reasons.append("Bullish EMA10/EMA25 crossover")
        elif prev_ema_fast > prev_ema_slow and latest_ema_fast < latest_ema_slow:
            reasons.append("Bearish EMA10/EMA25 crossover")

    # MACD cross
    prev_macd = macd_line[i - 1]
    prev_macd_sig = macd_sig[i - 1]
    if prev_macd is not None and prev_macd_sig is not None:
        if prev_macd < prev_macd_sig and latest_macd > latest_macd_sig:
            reasons.append("Bullish MACD cross")
        elif prev_macd > prev_macd_sig and latest_macd < latest_macd_sig:
            reasons.append("Bearish MACD cross")

    # Decide signal: require at least 2 bullish/bearish reasons
    bull_triggers = sum([
        1 if "RSI oversold" in r else 0 for r in reasons
    ]) + ("Bullish EMA10/EMA25 crossover" in reasons) + ("Bullish MACD cross" in reasons)

    bear_triggers = sum([
        1 if "RSI overbought" in r else 0 for r in reasons
    ]) + ("Bearish EMA10/EMA25 crossover" in reasons) + ("Bearish MACD cross" in reasons)

    if bull_triggers >= 2 and bear_triggers == 0:
        signal = "BUY"
    elif bear_triggers >= 2 and bull_triggers == 0:
        signal = "SELL"

    if signal is None:
        return None

    return {
        "asset": asset,
        "interval": interval,
        "close_price": round(float(latest_close), 6),
        "signal": signal,
        "reasons": reasons,
        "rsi": round(float(latest_rsi), 4),
        "macd": round(float(latest_macd), 6),
        "macd_signal": round(float(latest_macd_sig), 6),
        "ema_fast": round(float(latest_ema_fast), 6),
        "ema_slow": round(float(latest_ema_slow), 6),
    }
