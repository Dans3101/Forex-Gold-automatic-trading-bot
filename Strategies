import axios from "axios";
import { RSI, EMA } from "technicalindicators";

// ----- DATA FEED (Binance crypto 1m candles; no API key needed) -----
export async function fetchCandlesBinance(symbol = "BTCUSDT", limit = 200) {
  const url = "https://api.binance.com/api/v3/klines";
  const params = { symbol, interval: "1m", limit };
  const { data } = await axios.get(url, { params, timeout: 10000 });
  // kline fields: [openTime, open, high, low, close, volume, closeTime, ...]
  return data.map(k => ({
    openTime: k[0],
    open: parseFloat(k[1]),
    high: parseFloat(k[2]),
    low:  parseFloat(k[3]),
    close: parseFloat(k[4]),
    volume: parseFloat(k[5]),
    closeTime: k[6]
  }));
}

// ----- INDICATORS & SIGNAL -----
export function computeIndicators(closes) {
  if (closes.length < 50) return null;

  const rsiArr = RSI.calculate({ period: 14, values: closes });
  const emaFast = EMA.calculate({ period: 10, values: closes });
  const emaSlow = EMA.calculate({ period: 25, values: closes });

  // MACD (manual using EMA)
  const ema12 = EMA.calculate({ period: 12, values: closes });
  const ema26 = EMA.calculate({ period: 26, values: closes });
  const macdLine = ema26.map((_, i) =>
    ema12[i] !== undefined && ema26[i] !== undefined ? ema12[i] - ema26[i] : undefined
  ).filter(v => v !== undefined);
  const macdSignal = EMA.calculate({ period: 9, values: macdLine });

  // align last values
  const rsi = rsiArr[rsiArr.length - 1];
  const fast = emaFast[emaFast.length - 1];
  const slow = emaSlow[emaSlow.length - 1];
  const prevFast = emaFast[emaFast.length - 2];
  const prevSlow = emaSlow[emaSlow.length - 2];

  const macd = macdLine[macdLine.length - 1];
  const macdSig = macdSignal[macdSignal.length - 1];
  const prevMacd = macdLine[macdLine.length - 2];
  const prevMacdSig = macdSignal[macdSignal.length - 2];

  return { rsi, fast, slow, prevFast, prevSlow, macd, macdSig, prevMacd, prevMacdSig };
}

export function decideSignal(ind) {
  const reasons = [];
  let side = null;

  // RSI zones
  if (ind.rsi < 30) reasons.push("RSI oversold (<30)");
  if (ind.rsi > 70) reasons.push("RSI overbought (>70)");

  // EMA crossover
  if (ind.prevFast < ind.prevSlow && ind.fast > ind.slow) reasons.push("Bullish EMA10/25 cross");
  if (ind.prevFast > ind.prevSlow && ind.fast < ind.slow) reasons.push("Bearish EMA10/25 cross");

  // MACD cross
  if (ind.prevMacd < ind.prevMacdSig && ind.macd > ind.macdSig) reasons.push("Bullish MACD cross");
  if (ind.prevMacd > ind.prevMacdSig && ind.macd < ind.macdSig) reasons.push("Bearish MACD cross");

  const bull = reasons.filter(r => r.includes("Bullish") || r.includes("oversold")).length;
  const bear = reasons.filter(r => r.includes("Bearish") || r.includes("overbought")).length;

  if (bull >= 2 && bear === 0) side = "BUY ⬆️";
  if (bear >= 2 && bull === 0) side = "SELL ⬇️";

  return { side, reasons };
}